//css
import '@Style/ShelterDetailInfo.css'

import { getReviewDataList, postReviewData } from '@Services/useBoard';
import { useQuery } from '@tanstack/react-query';
import { useNavigate } from 'react-router-dom';
import { useEffect, useState } from "react";

export default function Review({ shelterItem }) {

    const navigate = useNavigate();

    const newReviewData = useQuery({ queryKey : ['newReviewData', shelterItem.shelterProperNum], queryFn : () => { return postReviewData(newReviewContent, shelterItem.shelterProperNum) }, enabled : false}); //Î¶¨Î∑∞ Ïì∞Í∏∞
    const reviewDataList = useQuery({ queryKey : ['reviewDataList', shelterItem.shelterProperNum], queryFn : () => { return getReviewDataList(shelterItem.shelterProperNum) }, enabled : false}); //Î¶¨Î∑∞ 10Í∞ú Í∞ÄÏ†∏Ïò§Í∏∞

    const [ newReviewContent, setNewReviewContent] = useState(''); //ÏÉàÎ°úÏö¥ Î¶¨Î∑∞ ÎÇ¥Ïö©
    const [ recentReviewData, setRecentReviewData ] = useState([]); //Î¶¨Î∑∞ ÏµúÏã†Ïàú 10Í∞ú
    const [ viewRecentReview, setViewRecentReview] = useState(false); //Î¶¨Î∑∞ Î≥¥Ïù¥Í∏∞

    useEffect(() => {
        if(reviewDataList.isSuccess) {
            setRecentReviewData(reviewDataList.data);
        }
    }, [reviewDataList.data, newReviewData.data]);

    useEffect(() => {
        if(newReviewData.isSuccess) {
            reviewDataList.refetch();
        }
    }, [newReviewData.data]);

    function clickNewReview() {

        //Î°úÍ∑∏Ïù∏ Ïó¨Î∂Ä
        if(localStorage.getItem('accessToken') === null || localStorage.getItem('accessToken') === '') {
            window.confirm('Î¶¨Î∑∞ Í∏∞Îä•ÏùÄ ÌöåÏõêÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏñ¥Ïöî!') && navigate('/login');
            return;
        }

        if (newReviewContent !== '') {
            newReviewData.refetch();
            setNewReviewContent('');
        } else {
            window.alert('Î¶¨Î∑∞ ÎÇ¥Ïö©ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî!');
        }
    }

    function clickRecentReview() {
        if(!viewRecentReview) {
            if(!reviewDataList.data) {
                reviewDataList.refetch();
            }
            setViewRecentReview(true);
        } else {
            setViewRecentReview(false);
        }
    }

    function reviewTimeFormat(dateString) {
        const now = new Date();
        const date = new Date(dateString);

        const diffInSeconds = Math.floor((now - date) / 1000);
        const diffInMinutes = Math.floor(diffInSeconds / 60);
        const diffInHours = Math.floor(diffInMinutes / 60);
        const diffInDays = Math.floor(diffInHours / 24);

        if (diffInDays >= 3) {
            // 3Ïùº Ïù¥ÏÉÅ Í≤ΩÍ≥ºÌïú Í≤ΩÏö∞ MM/DD ÌòïÏãùÏúºÎ°ú ÌëúÏãú
            const options = { month: 'numeric', day: 'numeric' };
            return date.toLocaleDateString(undefined, options);
        } else if (diffInDays > 0) {
            return `${diffInDays}ÏùºÏ†Ñ`;
        } else if (diffInHours > 0) {
            return `${diffInHours}ÏãúÍ∞ÑÏ†Ñ`;
        } else if (diffInMinutes > 0) {
            return `${diffInMinutes}Î∂ÑÏ†Ñ`;
        } else {
            return 'Î∞©Í∏àÏ†Ñ'; // 1Î∂Ñ Ïù¥ÎÇ¥Ïùò Í≤ΩÏö∞
        }
    }

    return (
        <>
            <div className='shelter-detail-info-foot' onClick={clickRecentReview}>
                <p className='shelter-detail-info-review-count'>üí¨ {recentReviewData.length !== 0 ? recentReviewData.length : shelterItem.reviewCount}</p>
                <div className='shelter-detail-info-review-firstline-btn-wrap'>
                    {shelterItem.reviewCount !== 0 || recentReviewData.length !== 0 ? <p className='shelter-detail-info-review-firstline'>{recentReviewData.length !== 0 ? recentReviewData[0].reviewContent : shelterItem.reviewContent}</p> : <></>}
                    {shelterItem.reviewCount !== 0 || recentReviewData.length !== 0 ? <p className='shelter-detail-info-more-btn'>‚¨áÔ∏è</p> : <></>}
                </div>
            </div>
            <ul className='shelter-detail-info-recent-review-wrap'>
                {recentReviewData.length !== 0 && viewRecentReview &&
                    recentReviewData.map(recentReview => 
                        <li className='shelter-detail-info-recent-review-list' key={recentReview.reviewProperNum}>
                            <p className='shelter-detail-info-recent-review'>{recentReview.reviewContent}</p>
                            <p className='shelter-detail-info-recent-review-time'>{reviewTimeFormat(recentReview.reviewWriteTime)}</p>
                            <p className='shelter-detail-info-recent-review-update'></p>
                            <p className='shelter-detail-info-recent-review-delete'></p>
                        </li>
                    )
                }
            </ul>
            <div className='shelter-detail-info-review-wrap'>
                <input type='text' className='new-review-box' placeholder='Î¶¨Î∑∞Î•º ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî (ÏöïÏÑ§Ïù¥ÎÇò ÎπÑÎ∞©Ïùò Î™©Ï†ÅÏúºÎ°ú ÏûëÏÑ±Ìïú Í∏ÄÏùÄ ÏÇ≠Ï†úÏ°∞Ïπò Îê©ÎãàÎã§)' value={newReviewContent} onChange={(e) => setNewReviewContent(e.target.value)}></input>
                <button className='new-review-btn' onClick={clickNewReview}>‚Ü©Ô∏é</button>
            </div>
        </>
    );
}